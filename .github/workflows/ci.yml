name: üöÄ Continuous Integration üõ†Ô∏è
run-name: "üöÄ Continuous Integration | Install | Build | Tests | Commit: ${{ github.sha }} üõ†Ô∏è"
on:
  push:
    branches:
      - ext-dev
      # - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then

            sudo apt update
            sudo apt-get update

            # "Installing wget, build-essential, cmake, git"
            sudo apt-get install -y wget build-essential cmake git

            # Install JUCE dependencies
            sudo apt-get install -y \
            libasound2-dev libjack-jackd2-dev \
            ladspa-sdk \
            libcurl4-openssl-dev \
            libfreetype-dev libfontconfig1-dev \
            libx11-dev libxcomposite-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
            libwebkit2gtk-4.1-dev \
            libglu1-mesa-dev mesa-common-dev
            
            # Install BTrack dependencies
            sudo apt-get install -y libsamplerate0 libsamplerate-dev
          
          elif [ "${{ runner.os }}" == "macOS" ]; then
            
              brew update
              brew install cmake git 
              brew install libsamplerate

          fi

          # Install submodules
          git submodule init
          git submodule update
          cd libs/BTrack
          git checkout bugFix
          cd ../..

      - name: Build project
        run: |
          cmake -S . -DBUILD_PLUGIN_HOST=OFF -B build 
          cmake --build build
      
      # Cache the build output using GitHub Actions cache
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}

  test-auto-tempo-detection:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore the build cache
      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
          fail-on-cache-miss: true
      
      # Install runtime dependencies only
      - name: Install runtime dependencies
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            
            sudo apt update
            sudo apt-get install -y libsamplerate0

          elif [ "${{ runner.os }}" == "macOS" ]; then
  
              brew update
              brew install libsamplerate

          fi
        
      - name: Apply Auto-Tempo-Detection tests
        run: ${PWD}/build/test/AutoTempoDetectionTests

  test-btrack:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore the build cache
      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
          fail-on-cache-miss: true
      
      # Install runtime dependencies only
      - name: Install runtime dependencies
        run: |
          
          if [ "${{ runner.os }}" == "Linux" ]; then
            
            sudo apt update
            sudo apt-get install -y libsamplerate0

          elif [ "${{ runner.os }}" == "macOS" ]; then
  
              brew update
              brew install libsamplerate

          fi
      
      - name: Apply BTrack tests
        run: ${PWD}/build/libs/BTrack/tests/Tests
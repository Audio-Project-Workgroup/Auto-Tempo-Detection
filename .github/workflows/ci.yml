name: üöÄ Continuous Integration üõ†Ô∏è
run-name: "üöÄ Continuous Integration | Install | Build | Tests | Commit: ${{ github.sha }} üõ†Ô∏è"
on:
  push:
    branches:
      - main
      
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive
          cd libs/BTrack
          git submodule update --init --recursive
          cd ../..

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt-get update

          # "Installing wget, build-essential, cmake, git"
          sudo apt-get install -y wget build-essential cmake git

          # Install JUCE dependencies
          sudo apt-get install -y \
          libasound2-dev libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev \
          libfreetype-dev libfontconfig1-dev \
          libx11-dev libxcomposite-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
          libwebkit2gtk-4.1-dev \
          libglu1-mesa-dev mesa-common-dev
          
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |            
          brew update
          brew install cmake git 
      
      - name: Build project (Unix)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -DBUILD_PLUGIN_HOST=OFF -B build
          cmake --build build

      - name: Build project (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          set PATH=%PATH%;%CD%\libs\BTrack\libs\libsamplerate-0.2.2-win64\bin
          cmake -S . -DBUILD_PLUGIN_HOST=OFF -B build
          cmake --build build
      
      # Cache the build output using GitHub Actions cache
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            build
            libs/BTrack/libs
          key: ${{ runner.os }}-build-${{ github.sha }}

  test-auto-tempo-detection:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore the build cache
      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            build
            libs/BTrack/libs
          key: ${{ runner.os }}-build-${{ github.sha }}
          fail-on-cache-miss: true
      
      - name: Apply Auto-Tempo-Detection tests (Unix)
        if: runner.os != 'Windows'
        run: ${PWD}/build/test/AutoTempoDetectionTests
      
      - name: Run Auto-Tempo-Detection tests (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          set PATH=%PATH%;%CD%\libs\BTrack\libs\libsamplerate-0.2.2-win64\bin
          build\test\Debug\AutoTempoDetectionTests.exe

  test-btrack:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore the build cache
      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            build
            libs/BTrack/libs
          key: ${{ runner.os }}-build-${{ github.sha }}
          fail-on-cache-miss: true
      
      # Install runtime dependencies only
      - name: Install runtime dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt-get install -y libsamplerate0

      - name: Install runtime dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install libsamplerate

      - name: Run BTrack tests (Unix)
        if: runner.os != 'Windows'
        run: ${PWD}/build/libs/BTrack/tests/Tests

      - name: Run BTrack tests (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          set PATH=%PATH%;%CD%\libs\BTrack\libs\libsamplerate-0.2.2-win64\bin
          build\libs\BTrack\tests\Debug\Tests.exe